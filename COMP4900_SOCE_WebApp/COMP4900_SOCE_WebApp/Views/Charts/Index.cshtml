@*@model IEnumerable<SensorDataModel.Models.Sensor>
@{
    ViewBag.Title = "Charts";
}

<script>

    function chk() {
        //chk sensor what a user select using dropdownlist
        var chkSensor1 = document.getElementById("sensor1").value;
        var chkSensor2 = document.getElementById("sensor2").value;
        var chkSensor3 = document.getElementById("sensor3").value;
        var chkSensor4 = document.getElementById("sensor4").value;
        var chkSensor5 = document.getElementById("sensor5").value;
        var chkSensor6 = document.getElementById("sensor6").value;

        var FDTS = new Date(2016, 4, 22, 19, 27, 15);
        var EDTS = new Date(2016, 4, 26, 19, 27, 15);

        $.ajax({
            url: '/Charts/GetCharts',
            type: 'GET',
            contentType: 'application/json',
            data: {
                Sensor1: chkSensor1,
                Sensor2: chkSensor2,
                Sensor3: chkSensor3,
                Sensor4: chkSensor4,
                Sensor5: chkSensor5,
                Sensor6: chkSensor6,

                FDTS: FDTS.toISOString(),
                EDTS: EDTS.toISOString()
            },
            dataType: "json",
            timeout: 10000,
            success: function (result) {

                Sensor1 = new Array();
                Sensor2 = new Array();
                Sensor3 = new Array();
                Sensor4 = new Array();
                Sensor5 = new Array();
                Sensor6 = new Array();

                var maxSensorValue = 0;

                for (var i = 0; i < result.length; i++) {

                    var json = JSON.stringify(new Date(parseInt(result[i].DateTime.substr(6))));
                    var parseDate = JSON.parse(json);
                    var SensorValue = result[i].SensorValue;

                    if (SensorValue > maxSensorValue) {
                        maxSensorValue = SensorValue;
                    }

                    switch (result[i].SensorName) {
                        case (chkSensor1):
                            Sensor1.push({ SensorValue: SensorValue, DateTime: parseDate });
                            break;
                        case (chkSensor2):
                            Sensor2.push({ SensorValue: SensorValue, DateTime: parseDate });
                            break;
                        case (chkSensor3):
                            Sensor3.push({ SensorValue: SensorValue, DateTime: parseDate });
                            break;
                        case (chkSensor4):
                            Sensor4.push({ SensorValue: SensorValue, DateTime: parseDate });
                            break;
                        case (chkSensor5):
                            Sensor5.push({ SensorValue: SensorValue, DateTime: parseDate });
                            break;
                        case (chkSensor6):
                            Sensor6.push({ SensorValue: SensorValue, DateTime: parseDate });
                            break;
                        default:
                            break;
                    };
                };

                InitChart(Sensor1, Sensor2, Sensor3, Sensor4, Sensor5, Sensor6, chkSensor1, chkSensor2, chkSensor3, chkSensor4, chkSensor5, chkSensor6, maxSensorValue);
                },
                error: function () {
                    console.log("Check ajax");
                }

            });

    }
</script>


@using (Html.BeginForm())
{
    <h4>Select Sensors</h4>
    <p>
        @Html.DropDownListFor(q => q.SensorList, Model.SensorList, "(Choose a Site)",
                                new
                                {
                                    style = "width:240px;",
                                    @class = "form-control",
                                    @onchange = "onChange('Site');",
                                })
    </p>
    @Html.DropDownList("sensor1", ViewData["sensor1"] as SelectList, "-- Sensor 1 --", htmlAttributes: new { @class = "form-control" })
    @Html.DropDownList("sensor2", ViewData["sensor2"] as SelectList, "-- Sensor 2 --", htmlAttributes: new { @class = "form-control" })
    @Html.DropDownList("sensor3", ViewData["sensor3"] as SelectList, "-- Sensor 3 --", htmlAttributes: new { @class = "form-control" })
    @Html.DropDownList("sensor4", ViewData["sensor4"] as SelectList, "-- Sensor 4 --", htmlAttributes: new { @class = "form-control" })
    @Html.DropDownList("sensor5", ViewData["sensor5"] as SelectList, "-- Sensor 5 --", htmlAttributes: new { @class = "form-control" })
    @Html.DropDownList("sensor6", ViewData["sensor6"] as SelectList, "-- Sensor 6 --", htmlAttributes: new { @class = "form-control" })
}

<div id="DateTimeSection">
    @Html.Partial("DateTime")
</div>

<!--input type="submit" value="GetChart" class="btn btn-primary btn-large" onclick="location.href='@Url.Action("GetCharts", "Charts")'"-->
<input type="submit" onclick="chk();" class="btn btn-primary btn-large" value="Submit" name="Submit">
<input type="submit" onclick="InitChart2();" class="btn btn-primary btn-large" value="Chart2" name="Submit">

<!--D3JS-->
<link href="http://getbootstrap.com/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="http://getbootstrap.com/examples/justified-nav/justified-nav.css" rel="stylesheet">
<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>

<style>
    .axis path {
        fill: none;
        stroke: #777;
        shape-rendering: crispEdges;
    }

    .axis text {
        font-family: Lato;
        font-size: 13px;
    }
</style>

<div class="container">
    <div clss="jumbotron">
        <svg id="visualisation" width="1000" height="600"></svg>
    </div>
</div>

<script>
    function InitChart(Sensor1, Sensor2, Sensor3, Sensor4, Sensor5, Sensor6, chkSensor1, chkSensor2, chkSensor3, chkSensor4, chkSensor5, chkSensor6, maxSensorValue) {
        //initializing dimensions of the visulisation
        var vis = d3.select("#visualisation").append('svg'),
            WIDTH = 800,
            HEIGHT = 600,
            MARGINS = {
                top: 20,
                right: 100,
                bottom: 100,
                left: 50
            }

        vis.attr('height', HEIGHT)
           .attr('width', WIDTH);

        //Defining time format
        var timeFormat = d3.time.format.utc("%Y-%m-%dT%H:%M:%S.%LZ");

        //Defining range for x. Defining range and domain for y
        var x = d3.time.scale().range([MARGINS.left, WIDTH - MARGINS.right])
        var y = d3.scale.linear().range([HEIGHT - MARGINS.top, MARGINS.bottom])//.domain([0, 20])

        var minDate = Sensor1[0].DateTime;
        var maxDate = Sensor1[Sensor1.length - 1].DateTime;

        //Defining domain for x
        x.domain([timeFormat.parse(minDate), timeFormat.parse(maxDate)])
        //x.domain(d3.extent(data, function (d) { return d.metricDate; }));
        //y.domain([0, d3.max(Sensor1, function (d) { return +d.SensorValue; })]);
        y.domain([0, maxSensorValue + 1]);

        //Define x axis
        var xAxis = d3.svg.axis()
            .scale(x)
            .ticks(8)
            .orient("bottom")
            .tickFormat(d3.time.format("%Y-%m-%d% %H:%M:%S")); //insert the tickFormat function

        //Define y axis
        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left");

        //Appending the axes to the svg
        vis.append("svg:g")
            .attr("class", "axis")
            .attr("transform", "translate(0," + (HEIGHT - MARGINS.bottom) + ")")
            .call(xAxis)
            .selectAll("text")
            .attr("y", 0)
            .attr("x", 9)
            .attr("dy", ".35em")
            .attr("transform", "rotate(45)")
            .style("text-anchor", "start");

        vis.append("svg:g")
            .attr("class", "axis")
            .attr("transform", "translate(" + (MARGINS.left) + ",0)")
            .call(yAxis)
            .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end")
            .text("Sensor Value");

        //Define line
        var lineGen = d3.svg.line()
            .x(function (d) {
                return x(timeFormat.parse(d.DateTime));
            })
            .y(function (d) {
                return y(d.SensorValue);
            });

        //Appending the line to the svg
        vis.append('svg:path')
            .attr('d', lineGen(Sensor1))
            .attr('stroke', 'green')
            .attr('stroke-width', 2)
            .attr('fill', 'none');

        //Appending the line to the svg
        vis.append('svg:path')
            .attr('d', lineGen(Sensor2))
            .attr('stroke', 'orange')
            .attr('stroke-width', 2)
            .attr('fill', 'none');

        //Appending the line to the svg
        vis.append('svg:path')
            .attr('d', lineGen(Sensor3))
            .attr('stroke', 'blue')
            .attr('stroke-width', 2)
            .attr('fill', 'none');

        //Appending the line to the svg
        vis.append('svg:path')
            .attr('d', lineGen(Sensor4))
            .attr('stroke', 'red')
            .attr('stroke-width', 2)
            .attr('fill', 'none');

        //Appending the line to the svg
        vis.append('svg:path')
            .attr('d', lineGen(Sensor5))
            .attr('stroke', 'black')
            .attr('stroke-width', 2)
            .attr('fill', 'none');

        //Appending the line to the svg
        vis.append('svg:path')
            .attr('d', lineGen(Sensor6))
            .attr('stroke', 'brown')
            .attr('stroke-width', 2)
            .attr('fill', 'none');
    };



    function InitChart2() {
        data = [{
            "date": 1357714800000,
            "value": "5.2"
        }, {
            "date": 1357715400000,
            "value": "5.2"
        }, {
            "date": 1357716000000,
            "value": "5.2"
        }, {
            "date": 1357716600000,
            "value": "5.1"
        }, {
            "date": 1357717200000,
            "value": "5.5"
        }, {
            "date": 1357717800000,
            "value": "5.6"
        }, {
            "date": 1357718400000,
            "value": "5.6"
        }, {
            "date": 1357719000000,
            "value": "6"
        }, {
            "date": 1357719600000,
            "value": "5.1"
        }, {
            "date": 1357720200000,
            "value": "5.3"
        }, {
            "date": 1357720800000,
            "value": "5.4"
        }]

        margin = {
            top: 20,
            right: 20,
            bottom: 20,
            left: 45
        };

        width = 400 - margin.left - margin.right;
        height = 200 - margin.top - margin.bottom;

        var x = d3.time.scale()
            .domain(d3.extent(data, function (d) {
                return d.date;
            }))
            .range([0, width]);

        var y = d3.scale.linear()
            .domain(d3.extent(data, function (d) {
                return d.value;
            }))
            .range([height, 0]);

        var line = d3.svg.line()
            .x(function (d) {
                return x(d.date);
            })
            .y(function (d) {
                return y(d.value);
            });

        var zoom = d3.behavior.zoom()
            .x(x)
            .y(y)
            .on("zoom", zoomed);

        svg = d3.select('#chart')
            .append("svg:svg")
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
            .append("svg:g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            .call(zoom);

        svg.append("svg:rect")
            .attr("width", width)
            .attr("height", height)
            .attr("class", "plot");

        var make_x_axis = function () {
            return d3.svg.axis()
                .scale(x)
                .orient("bottom")
                .ticks(5);
        };

        var make_y_axis = function () {
            return d3.svg.axis()
                .scale(y)
                .orient("left")
                .ticks(5);
        };

        var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom")
            .ticks(5);

        svg.append("svg:g")
            .attr("class", "x axis")
            .attr("transform", "translate(0, " + height + ")")
            .call(xAxis);

        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left")
            .ticks(5);

        svg.append("g")
            .attr("class", "y axis")
            .call(yAxis);

        svg.append("g")
            .attr("class", "x grid")
            .attr("transform", "translate(0," + height + ")")
            .call(make_x_axis()
            .tickSize(-height, 0, 0)
            .tickFormat(""));

        svg.append("g")
            .attr("class", "y grid")
            .call(make_y_axis()
            .tickSize(-width, 0, 0)
            .tickFormat(""));

        var clip = svg.append("svg:clipPath")
            .attr("id", "clip")
            .append("svg:rect")
            .attr("x", 0)
            .attr("y", 0)
            .attr("width", width)
            .attr("height", height);

        var chartBody = svg.append("g")
            .attr("clip-path", "url(#clip)");

        chartBody.append("svg:path")
            .datum(data)
            .attr("class", "line")
            .attr("d", line);

        function zoomed() {
            console.log(d3.event.translate);
            console.log(d3.event.scale);
            svg.select(".x.axis").call(xAxis);
            svg.select(".y.axis").call(yAxis);
            svg.select(".x.grid")
                .call(make_x_axis()
                .tickSize(-height, 0, 0)
                .tickFormat(""));
            svg.select(".y.grid")
                .call(make_y_axis()
                .tickSize(-width, 0, 0)
                .tickFormat(""));
            svg.select(".line")
                .attr("class", "line")
                .attr("d", line);
        }
    };
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@