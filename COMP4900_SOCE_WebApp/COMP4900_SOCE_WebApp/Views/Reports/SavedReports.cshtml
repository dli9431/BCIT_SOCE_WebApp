@*@model SensorDataModel.Models.SavedReport*@
@model IEnumerable <SensorDataModel.Models.Sensor>
@{
    ViewBag.Title = "SavedReports";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts {
    @*<script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>*@

    <script type="text/javascript">

        $("input[name='SelectedCG']").on('change', function () {
            $.ajax({
                url: '@Url.Action("FilterReports", "Reports")',
                data: { cgName: $("input[name='SelectedCG']:checked").val() },
                type: 'POST',
                success: function (data) {
                    $('#reportTable').html(data);
                    $('#reportTable').show();
                },
                error: function(xhr, status, error)
                {
                    alert(xhr.responseText);
                }
            })
        });

        var SensorList = @Html.Raw(Json.Encode(ViewData["SensorList"]));

        function SendValues2(SensorList, FDTS, EDTS){
            var FDTS = document.getElementById("StartTime").value;
            var EDTS = document.getElementById("EndTime").value;

            if (FDTS >= EDTS) {
                alert("Start Time must be earlier than End Time.");
            } else {
                consloe.log(FDTS);
                alert(SensorList + " " +  FDTS + " " + EDTS);
            }
        }

    </script>

    <script type="text/javascript">
        $("#csv").click(function () {
            $.ajax({
                url: '@Url.Action("ExportReports", "Reports")',
                data: { cn: $("input[name='SelectedCG']:checked").val() },
                type: 'POST',
                success: function (data) {
                    alert("Exported!");
                },
                error: function(xhr, status, error)
                {
                    alert(xhr.responseText);
                }
            })});
    </script>
}


<h2>Saved Report</h2> 
<h3>@ViewBag.ReportName for Project @ViewBag.ProjectName</h3>

<div class="container">
    <form action="" class="form-horizontal">
        <fieldset>
            <div class="control-group">
                <div type="hidden" class="controls input-append date form_datetime" data-date="2016-05-22T05:25:07Z" data-date-format="dd MM yyyy - HH:ii p" data-link-field="dtp_input2">
                    <input type="hidden" size="20" id="StartTime" type="text" value="" readonly>
                    <span type="hidden" class="add-on"><i class="icon-remove"></i></span>
                    <span type="hidden" class="add-on"><i class="icon-th"></i></span>
                </div>
                <input type="hidden" id="dtp_input1" value="" /><br />
            </div>
            <div class="control-group">
                <div type="hidden" class="controls input-append date form_datetime" data-date="2016-05-22T05:25:07Z" data-date-format="dd MM yyyy - HH:ii p" data-link-field="dtp_input1">
                    <input type="hidden" size="20" id="EndTime" type="text" value="" readonly>
                    <span type="hidden" class="add-on"><i class="icon-remove"></i></span>
                    <span type="hidden" class="add-on"><i class="icon-th"></i></span>
                </div>
                <input type="hidden" id="dtp_input2" value="" /><br />
            </div>
        </fieldset>
    </form>
</div>
<input type="submit" value="Chart" class="btn btn-primary btn-large" onclick="SendValues(SensorList, FDTS, EDTS);">
<input type="submit" value="Chart" class="btn btn-primary btn-large" onclick="SendValues2(SensorList, FDTS, EDTS);">

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.SensorName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.DateTime)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.SensorValue)
        </th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            @*<td>
                    @Html.DisplayFor(modelItem => item.SensorName)
                </td>*@
            <td>
                @Html.DisplayFor(model => item.SensorName, new { htmlAttributes = new { @class = "form-control" } })
            </td>
            <td>
                @Html.DisplayFor(model => item.DateTime, new { htmlAttributes = new { @class = "form-control" } })
            </td>
            <td>
                @Html.DisplayFor(model => item.SensorValue, new { htmlAttributes = new { @class = "form-control" } })
            </td>
        </tr>
    }
</table>


<link href="~/Content/bootstrap.min.css" rel="stylesheet" media="screen">
<link href="~/Content/bootstrap.css" rel="stylesheet" />
<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
<script type="text/javascript" src="~/Scripts/jquery-1.8.3.min.js"></script>
<script type="text/javascript" src="~/Scripts/bootstrap.min.js"></script>
<script type="text/javascript" src="~/Scripts/bootstrap-datetimepicker.js"></script>

<script type="text/javascript">
    $('.form_datetime').datetimepicker({
        //language:  'ca',
        format: 'yyyy-mm-dd hh:ii',
        weekStart: 1,
        todayBtn: 1,
        autoclose: 1,
        todayHighlight: 1,
        startView: 2,
        forceParse: 0,
        showMeridian: 1
    });

    var SensorList = @Html.Raw(Json.Encode(ViewData["SensorList"]));
    var startDate = @ViewBag.begin;
    var endDate = @ViewBag.end;
    
    //var FDTS = document.getElementById("StartTime").value;
    //var EDTS = document.getElementById("EndTime").value;

    var FDTS = startDate;
    var EDTS = endDate;

    function SendValues(SensorList, FDTS, EDTS){
        alert(FDTS);
        alert(EDTS);
        var x = $("#datetimepicker").find("dtp_input1").val();
        alert(x);
        if (FDTS >= EDTS) {
            alert("Start Time must be earlier than End Time.");
        } else {
            consloe.log(FDTS);
            alert(SensorList + " " +  FDTS + " " + EDTS);
        }
    }
</script>